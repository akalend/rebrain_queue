
#user  nobody;
worker_processes  1;

error_log  /home/akalend/projects/test/rebrain/queue/http/error.log info;
# error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {

    # lua_package_path "/usr/local/openresty/lualib"; 
    # lua_package_path "/usr/local/lib/lua/?.lua;";
    # lua_load_resty_core off;
    # lua_package_path "/home/akalend/.opm/cache/openresty/";
    lua_shared_dict vars 4m;
    lua_shared_dict stat 1m;

    include       mime.types;
    # include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  text/html;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


   server {
        listen       8080;
        server_name  localhost;

    	root  /home/akalend/projects/rebrain_queue/http;
    	# index index.html;
        index index.base.html;
        # index index.websocket.html;

        location /start {
            proxy_pass http://127.0.0.1:8000;
        }

        location /status_http {
            proxy_pass http://127.0.0.1:8000;
        }


        location /status {
            # alias /dev/shm/status;
            alias /tmp/status;
         }

         location /status_redis {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                -- ngx.say("***** uri=", ngx.var.uri )

                red:set_timeouts(1000, 1000, 1000) -- 1 sec

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end


                local res, err = red:get(ngx.var.uri)
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                ngx.say(res)
            }

        }


        location /ws {
          lua_socket_log_errors off;
          lua_check_client_abort on;
          content_by_lua_block {

    local server = require "resty.websocket.server"
    local redis = require "resty.redis"

    local host = "127.0.0.1"
    local port = 6379

    local red = redis:new()

    local ok, err = red:connect(host, port)
    if not ok then
        ngx.log(ngx.ERR,"1: failed to redis connect: ", err)
        return
    end

    ngx.log( ngx.INFO, "redis: connected")


    local wb, err = server:new{
        timeout = 3000,  -- in milliseconds
        max_payload_len = 65535,
    }
 
    while true do
      local data, typ, err = wb:recv_frame()
      if wb.fatal then
        ngx.log(ngx.ERR, "failed to receive frame: ", err)
        return ngx.exit(444)
      end

      ngx.log(ngx.INFO, "receive frame type: ", typ)
      ngx.log(ngx.INFO, "receive frame data: ", data)


      if not data then
        local bytes, err = wb:send_ping()
        if not bytes then
          ngx.log(ngx.ERR, "failed to send ping: ", err)
          return ngx.exit(444)
        end
      elseif typ == "close" then break
          ngx.log(ngx.INFO, "closed: ")
          break
      elseif typ == "ping" then
        local bytes, err = wb:send_pong()
        if not bytes then
          ngx.log(ngx.ERR, "failed to send pong: ", err)
          return ngx.exit(444)
        end
      elseif typ == "pong" then
        ngx.log(ngx.INFO, "client ponged")
      elseif typ == "text" then

        if data then
          
            ngx.log(ngx.INFO,"subscribe to test: data=" , data)
            local res, err = red:subscribe(data)
            if not res then
                ngx.log(ngx.ERR,"1: failed to subscribe: ", err)
                return ngx.exit(444)
            end

            if not res then
                ngx.log(ngx.ERR,"1: failed to subscribe: ", err)
                
                local bytes, err = wb:send_close(1000, "enough, enough!")
                if not bytes then
                    ngx.log(ngx.ERR, "failed to send the close frame: ", err)
                end

                return  ngx.exit(444)
            end

            res, err = red:read_reply()
            if not res then
                ngx.log(ngx.ERR,"failed to read reply from redis: ", err)
                return  ngx.exit(444)
            end

            local bytes, err = wb:send_text(res[3])
            if not bytes then
              ngx.log(ngx.ERR, "failed to send text: ", err)
              return ngx.exit(444)
            end
            res, err = red:unsubscribe(data)
            if not res then
                ngx.log(ngx.ERR,"1: failed to subscribe: ", err)
                return ngx.exit(444)
            end

            break

        end

      end
    end



            }
        }

   }

}
